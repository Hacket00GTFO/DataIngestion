{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Norbe\\\\OneDrive - Universidad Tecmilenio\\\\TECMILENIO\\\\tareas 5to semestre\\\\Repositorios\\\\DataIngestion\\\\frontend\\\\src\\\\services\\\\DataIngestionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { dataIngestionAPI } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataIngestionContext = /*#__PURE__*/createContext();\nexport const useDataIngestion = () => {\n  _s();\n  const context = useContext(DataIngestionContext);\n  if (!context) {\n    throw new Error('useDataIngestion must be used within a DataIngestionProvider');\n  }\n  return context;\n};\n_s(useDataIngestion, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const DataIngestionProvider = ({\n  children\n}) => {\n  _s2();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const ingestData = async data => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.ingestData(data);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getData();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getStatistics = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getStatistics();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getSchema = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getSchema();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    loading,\n    error,\n    ingestData,\n    getData,\n    getStatistics,\n    getSchema\n  };\n  return /*#__PURE__*/_jsxDEV(DataIngestionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s2(DataIngestionProvider, \"Iz3ozxQ+abMaAIcGIvU8cKUcBeo=\");\n_c = DataIngestionProvider;\nvar _c;\n$RefreshReg$(_c, \"DataIngestionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","dataIngestionAPI","jsxDEV","_jsxDEV","DataIngestionContext","useDataIngestion","_s","context","Error","DataIngestionProvider","children","_s2","loading","setLoading","error","setError","ingestData","data","response","err","message","getData","getStatistics","getSchema","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Norbe/OneDrive - Universidad Tecmilenio/TECMILENIO/tareas 5to semestre/Repositorios/DataIngestion/frontend/src/services/DataIngestionContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { dataIngestionAPI } from './api';\r\n\r\nconst DataIngestionContext = createContext();\r\n\r\nexport const useDataIngestion = () => {\r\n  const context = useContext(DataIngestionContext);\r\n  if (!context) {\r\n    throw new Error('useDataIngestion must be used within a DataIngestionProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const DataIngestionProvider = ({ children }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const ingestData = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await dataIngestionAPI.ingestData(data);\r\n      return response;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await dataIngestionAPI.getData();\r\n      return response;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatistics = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await dataIngestionAPI.getStatistics();\r\n      return response;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getSchema = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await dataIngestionAPI.getSchema();\r\n      return response;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    loading,\r\n    error,\r\n    ingestData,\r\n    getData,\r\n    getStatistics,\r\n    getSchema,\r\n  };\r\n\r\n  return (\r\n    <DataIngestionContext.Provider value={value}>\r\n      {children}\r\n    </DataIngestionContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}