{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Norbe\\\\OneDrive - Universidad Tecmilenio\\\\TECMILENIO\\\\tareas 5to semestre\\\\Repositorios\\\\DataIngestion\\\\frontend\\\\src\\\\services\\\\DataIngestionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef } from 'react';\nimport { dataIngestionAPI } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataIngestionContext = /*#__PURE__*/createContext();\nexport const useDataIngestion = () => {\n  _s();\n  const context = useContext(DataIngestionContext);\n  if (!context) {\n    throw new Error('useDataIngestion must be used within a DataIngestionProvider');\n  }\n  return context;\n};\n\n// Cache para almacenar respuestas de API\n_s(useDataIngestion, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst apiCache = new Map();\nconst CACHE_DURATION = 30000; // 30 segundos\n\n// Función para crear una clave de cache\nconst createCacheKey = (method, params = {}) => {\n  return `${method}_${JSON.stringify(params)}`;\n};\n\n// Función para verificar si el cache es válido\nconst isCacheValid = cacheEntry => {\n  return cacheEntry && Date.now() - cacheEntry.timestamp < CACHE_DURATION;\n};\nexport const DataIngestionProvider = ({\n  children\n}) => {\n  _s2();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const debounceTimers = useRef(new Map());\n  const ingestData = async data => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.ingestData(data);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getData();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getStatistics = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getStatistics();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getSchema = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getSchema();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getTiradoresStatistics = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getTiradoresStatistics();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getSesionesStatistics = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getSesionesStatistics();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getAnalisisCompleto = async (params = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getAnalisisCompleto(params);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getTiradores = async (params = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getTiradores(params);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addManualEntry = async data => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.addManualEntry(data);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getDataSchema = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getDataSchema();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.deleteAllData();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    loading,\n    error,\n    ingestData,\n    getData,\n    getStatistics,\n    getSchema,\n    getTiradoresStatistics,\n    getSesionesStatistics,\n    getAnalisisCompleto,\n    getTiradores,\n    addManualEntry,\n    getDataSchema,\n    deleteAllData\n  };\n  return /*#__PURE__*/_jsxDEV(DataIngestionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s2(DataIngestionProvider, \"qzy60OtcBtd2+4SPhit2zWojD3A=\");\n_c = DataIngestionProvider;\nvar _c;\n$RefreshReg$(_c, \"DataIngestionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","dataIngestionAPI","jsxDEV","_jsxDEV","DataIngestionContext","useDataIngestion","_s","context","Error","apiCache","Map","CACHE_DURATION","createCacheKey","method","params","JSON","stringify","isCacheValid","cacheEntry","Date","now","timestamp","DataIngestionProvider","children","_s2","loading","setLoading","error","setError","debounceTimers","ingestData","data","response","err","message","getData","getStatistics","getSchema","getTiradoresStatistics","getSesionesStatistics","getAnalisisCompleto","getTiradores","addManualEntry","getDataSchema","deleteAllData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Norbe/OneDrive - Universidad Tecmilenio/TECMILENIO/tareas 5to semestre/Repositorios/DataIngestion/frontend/src/services/DataIngestionContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useRef } from 'react';\nimport { dataIngestionAPI } from './api';\n\nconst DataIngestionContext = createContext();\n\nexport const useDataIngestion = () => {\n  const context = useContext(DataIngestionContext);\n  if (!context) {\n    throw new Error('useDataIngestion must be used within a DataIngestionProvider');\n  }\n  return context;\n};\n\n// Cache para almacenar respuestas de API\nconst apiCache = new Map();\nconst CACHE_DURATION = 30000; // 30 segundos\n\n// Función para crear una clave de cache\nconst createCacheKey = (method, params = {}) => {\n  return `${method}_${JSON.stringify(params)}`;\n};\n\n// Función para verificar si el cache es válido\nconst isCacheValid = (cacheEntry) => {\n  return cacheEntry && (Date.now() - cacheEntry.timestamp) < CACHE_DURATION;\n};\n\nexport const DataIngestionProvider = ({ children }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const debounceTimers = useRef(new Map());\n\n  const ingestData = async (data) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.ingestData(data);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getData();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatistics = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getStatistics();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getSchema = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getSchema();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getTiradoresStatistics = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getTiradoresStatistics();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getSesionesStatistics = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getSesionesStatistics();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getAnalisisCompleto = async (params = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getAnalisisCompleto(params);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getTiradores = async (params = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getTiradores(params);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addManualEntry = async (data) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.addManualEntry(data);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDataSchema = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.getDataSchema();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await dataIngestionAPI.deleteAllData();\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value = {\n    loading,\n    error,\n    ingestData,\n    getData,\n    getStatistics,\n    getSchema,\n    getTiradoresStatistics,\n    getSesionesStatistics,\n    getAnalisisCompleto,\n    getTiradores,\n    addManualEntry,\n    getDataSchema,\n    deleteAllData,\n  };\n\n  return (\n    <DataIngestionContext.Provider value={value}>\n      {children}\n    </DataIngestionContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}