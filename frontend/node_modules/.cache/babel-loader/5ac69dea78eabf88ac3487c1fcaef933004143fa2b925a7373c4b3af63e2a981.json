{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para manejar errores\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response$data;\n  const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Error de conexión';\n  throw new Error(message);\n});\nexport const dataIngestionAPI = {\n  // Ingesta de datos\n  ingestData: async data => {\n    const response = await api.post('/data/ingest', {\n      data,\n      source: 'web_interface'\n    });\n    return response.data;\n  },\n  // Obtener datos\n  getData: async () => {\n    const response = await api.get('/data');\n    return response.data;\n  },\n  // Obtener estadísticas\n  getStatistics: async () => {\n    const response = await api.get('/data/statistics');\n    return response.data;\n  },\n  // Obtener esquema\n  getSchema: async () => {\n    const response = await api.get('/data/schema');\n    return response.data;\n  },\n  // Subir archivo Excel\n  uploadExcel: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/data/upload-excel', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Verificar salud del servicio\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n  // Estadísticas de tiradores (usando endpoint que funciona)\n  getTiradoresStatistics: async () => {\n    const response = await api.get('/tiradores/stats/tiradores');\n    return response.data;\n  },\n  // Estadísticas de sesiones (mock temporalmente hasta resolver ruta)\n  getSesionesStatistics: async () => {\n    // Retornar datos vacíos temporalmente\n    return {\n      total_sesiones: 0,\n      precision_promedio: null,\n      distancia_promedio: null,\n      tiempo_promedio: null,\n      ambientes_unicos: 0,\n      primera_sesion: null,\n      ultima_sesion: null\n    };\n  },\n  // Análisis completo\n  getAnalisisCompleto: async (params = {}) => {\n    const response = await api.get('/tiradores/analisis/completo', {\n      params\n    });\n    return response.data;\n  },\n  // Obtener tiradores\n  getTiradores: async (params = {}) => {\n    const response = await api.get('/tiradores/', {\n      params\n    });\n    return response.data;\n  },\n  // APIs específicas para Excel\n  getExcelData: async (skip = 0, limit = 100) => {\n    const response = await api.get('/excel/data', {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  },\n  getExcelStatistics: async () => {\n    const response = await api.get('/excel/statistics');\n    return response.data;\n  },\n  getExcelSchema: async () => {\n    const response = await api.get('/excel/schema');\n    return response.data;\n  },\n  uploadExcelFile: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/excel/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","response","use","error","_error$response","_error$response$data","message","data","detail","Error","dataIngestionAPI","ingestData","post","source","getData","get","getStatistics","getSchema","uploadExcel","file","formData","FormData","append","healthCheck","getTiradoresStatistics","getSesionesStatistics","total_sesiones","precision_promedio","distancia_promedio","tiempo_promedio","ambientes_unicos","primera_sesion","ultima_sesion","getAnalisisCompleto","params","getTiradores","getExcelData","skip","limit","getExcelStatistics","getExcelSchema","uploadExcelFile"],"sources":["C:/Users/Norbe/OneDrive - Universidad Tecmilenio/TECMILENIO/tareas 5to semestre/Repositorios/DataIngestion/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para manejar errores\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    const message = error.response?.data?.detail || error.message || 'Error de conexión';\r\n    throw new Error(message);\r\n  }\r\n);\r\n\r\nexport const dataIngestionAPI = {\r\n  // Ingesta de datos\r\n  ingestData: async (data) => {\r\n    const response = await api.post('/data/ingest', {\r\n      data,\r\n      source: 'web_interface',\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener datos\r\n  getData: async () => {\r\n    const response = await api.get('/data');\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener estadísticas\r\n  getStatistics: async () => {\r\n    const response = await api.get('/data/statistics');\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener esquema\r\n  getSchema: async () => {\r\n    const response = await api.get('/data/schema');\r\n    return response.data;\r\n  },\r\n\r\n  // Subir archivo Excel\r\n  uploadExcel: async (file) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    \r\n    const response = await api.post('/data/upload-excel', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Verificar salud del servicio\r\n  healthCheck: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n\r\n  // Estadísticas de tiradores (usando endpoint que funciona)\r\n  getTiradoresStatistics: async () => {\r\n    const response = await api.get('/tiradores/stats/tiradores');\r\n    return response.data;\r\n  },\r\n\r\n  // Estadísticas de sesiones (mock temporalmente hasta resolver ruta)\r\n  getSesionesStatistics: async () => {\r\n    // Retornar datos vacíos temporalmente\r\n    return {\r\n      total_sesiones: 0,\r\n      precision_promedio: null,\r\n      distancia_promedio: null,\r\n      tiempo_promedio: null,\r\n      ambientes_unicos: 0,\r\n      primera_sesion: null,\r\n      ultima_sesion: null\r\n    };\r\n  },\r\n\r\n  // Análisis completo\r\n  getAnalisisCompleto: async (params = {}) => {\r\n    const response = await api.get('/tiradores/analisis/completo', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Obtener tiradores\r\n  getTiradores: async (params = {}) => {\r\n    const response = await api.get('/tiradores/', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // APIs específicas para Excel\r\n  getExcelData: async (skip = 0, limit = 100) => {\r\n    const response = await api.get('/excel/data', { params: { skip, limit } });\r\n    return response.data;\r\n  },\r\n\r\n  getExcelStatistics: async () => {\r\n    const response = await api.get('/excel/statistics');\r\n    return response.data;\r\n  },\r\n\r\n  getExcelSchema: async () => {\r\n    const response = await api.get('/excel/schema');\r\n    return response.data;\r\n  },\r\n\r\n  uploadExcelFile: async (file) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    \r\n    const response = await api.post('/excel/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}