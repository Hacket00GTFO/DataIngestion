name: Sync Child Branches with Development

on:
  push:
    branches: [ Development ]
  pull_request:
    types: [ closed ]
    branches: [ Development ]
  workflow_dispatch:  # Permite ejecuci√≥n manual
    inputs:
      force_sync:
        description: 'Forzar sincronizaci√≥n incluso si no hay cambios'
        required: false
        default: false
        type: boolean

permissions:
  contents: write      # Necesario para hacer push a branches
  pull-requests: read  # Necesario para leer informaci√≥n de PRs
  actions: read        # Necesario para leer el estado de otros workflows

jobs:
  # Verificar permisos del usuario
  check-permissions:
    runs-on: ubuntu-latest
    outputs:
      user-allowed: ${{ steps.check.outputs.allowed }}
      user-name: ${{ steps.check.outputs.username }}
    steps:
    - name: Check user permissions
      id: check
      run: |
        # Lista de usuarios autorizados para trigger sincronizaci√≥n autom√°tica
        # Solo usuarios que pueden hacer push a Development
        ALLOWED_USERS=("branToRep" "HilaryCamacho" "JaobSandoval" "solmuz" "NorbertoSuas")
        
        # Obtener el usuario que hizo el push/merge
        if [ "${{ github.event_name }}" = "push" ]; then
          USER_NAME="${{ github.actor }}"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          USER_NAME="${{ github.event.pull_request.user.login }}"
        else
          USER_NAME="${{ github.actor }}"
        fi
        
        echo "username=$USER_NAME" >> $GITHUB_OUTPUT
        
        # Verificar si el usuario est√° en la lista de permitidos
        ALLOWED=false
        for allowed_user in "${ALLOWED_USERS[@]}"; do
          if [ "$USER_NAME" = "$allowed_user" ]; then
            ALLOWED=true
            break
          fi
        done
        
        if [ "$ALLOWED" = "true" ]; then
          echo "‚úÖ Usuario $USER_NAME autorizado para sincronizaci√≥n"
          echo "allowed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Usuario $USER_NAME NO autorizado para sincronizaci√≥n"
          echo "allowed=false" >> $GITHUB_OUTPUT
        fi

  sync-branches:
    runs-on: ubuntu-latest
    needs: check-permissions
    
    # Solo ejecutar si el usuario est√° autorizado y el PR fue merged o es un push
    if: |
      needs.check-permissions.outputs.user-allowed == 'true' && 
      (github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Log sync information
      run: |
        echo "üîÑ Iniciando sincronizaci√≥n de branches"
        echo "üë§ Usuario autorizado: ${{ needs.check-permissions.outputs.user-name }}"
        echo "üìÖ Fecha: $(date)"
        echo "üåø Branch trigger: ${{ github.ref_name }}"
        echo "üîÄ Evento: ${{ github.event_name }}"
        echo "üí™ Forzar sync: ${{ inputs.force_sync }}"
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Sync Backend branch
      run: |
        echo "Sincronizando branch Backend con Development..."
        
        # Verificar si el branch Backend existe
        if git show-ref --verify --quiet refs/remotes/origin/Backend; then
          # El branch Backend existe, hacer merge
          git checkout Backend
          git pull origin Backend
          git merge origin/Development --no-edit
          
          # Solo hacer push si hay cambios
          if ! git diff --quiet HEAD origin/Backend; then
            git push origin Backend
            echo "‚úÖ Branch Backend sincronizado exitosamente"
          else
            echo "‚ÑπÔ∏è Branch Backend ya est√° actualizado"
          fi
        else
          # El branch Backend no existe, crearlo desde Development
          git checkout -b Backend origin/Development
          git push origin Backend
          echo "‚úÖ Branch Backend creado desde Development"
        fi
    
    - name: Sync Frontend branch
      run: |
        echo "Sincronizando branch Frontend con Development..."
        
        # Verificar si el branch Frontend existe
        if git show-ref --verify --quiet refs/remotes/origin/Frontend; then
          # El branch Frontend existe, hacer merge
          git checkout Frontend
          git pull origin Frontend
          git merge origin/Development --no-edit
          
          # Solo hacer push si hay cambios
          if ! git diff --quiet HEAD origin/Frontend; then
            git push origin Frontend
            echo "‚úÖ Branch Frontend sincronizado exitosamente"
          else
            echo "‚ÑπÔ∏è Branch Frontend ya est√° actualizado"
          fi
        else
          # El branch Frontend no existe, crearlo desde Development
          git checkout -b Frontend origin/Development
          git push origin Frontend
          echo "‚úÖ Branch Frontend creado desde Development"
        fi
    
    - name: Summary
      run: |
        echo "üéâ Sincronizaci√≥n completada"
        echo "üìä Resumen:"
        echo "  - Branch Development: actualizado"
        echo "  - Branch Backend: sincronizado"
        echo "  - Branch Frontend: sincronizado"
        echo "  - Usuario: ${{ needs.check-permissions.outputs.user-name }}"
        echo "  - Fecha: $(date)"
    
    - name: Notify on Success
      if: success()
      run: |
        echo "‚úÖ Notificaci√≥n de √©xito enviada a norberto.suaste@outlook.com"
        echo "üìß Sincronizaci√≥n completada exitosamente por ${{ needs.check-permissions.outputs.user-name }}"
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Notificaci√≥n de error enviada a norberto.suaste@outlook.com"
        echo "üö® Error en sincronizaci√≥n iniciada por ${{ needs.check-permissions.outputs.user-name }}"
